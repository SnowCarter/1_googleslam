// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Trajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectory_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectory_Submap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_Submap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/trajectory.proto");
  GOOGLE_CHECK(file != NULL);
  Trajectory_descriptor_ = file->message_type(0);
  static const int Trajectory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, submap_),
  };
  Trajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trajectory_descriptor_,
      Trajectory::default_instance_,
      Trajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trajectory));
  Trajectory_Node_descriptor_ = Trajectory_descriptor_->nested_type(0);
  static const int Trajectory_Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, pose_),
  };
  Trajectory_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trajectory_Node_descriptor_,
      Trajectory_Node::default_instance_,
      Trajectory_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trajectory_Node));
  Trajectory_Submap_descriptor_ = Trajectory_descriptor_->nested_type(1);
  static const int Trajectory_Submap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, submap_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, pose_),
  };
  Trajectory_Submap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trajectory_Submap_descriptor_,
      Trajectory_Submap::default_instance_,
      Trajectory_Submap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trajectory_Submap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trajectory_descriptor_, &Trajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trajectory_Node_descriptor_, &Trajectory_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trajectory_Submap_descriptor_, &Trajectory_Submap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
  delete Trajectory::default_instance_;
  delete Trajectory_reflection_;
  delete Trajectory_Node::default_instance_;
  delete Trajectory_Node_reflection_;
  delete Trajectory_Submap::default_instance_;
  delete Trajectory_Submap_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+cartographer/mapping/proto/trajectory."
    "proto\022\032cartographer.mapping.proto\032,carto"
    "grapher/transform/proto/transform.proto\""
    "\326\002\n\nTrajectory\022\025\n\rtrajectory_id\030\003 \001(\005\0229\n"
    "\004node\030\001 \003(\0132+.cartographer.mapping.proto"
    ".Trajectory.Node\022=\n\006submap\030\002 \003(\0132-.carto"
    "grapher.mapping.proto.Trajectory.Submap\032"
    "b\n\004Node\022\022\n\nnode_index\030\007 \001(\005\022\021\n\ttimestamp"
    "\030\001 \001(\003\0223\n\004pose\030\005 \001(\0132%.cartographer.tran"
    "sform.proto.Rigid3d\032S\n\006Submap\022\024\n\014submap_"
    "index\030\002 \001(\005\0223\n\004pose\030\001 \001(\0132%.cartographer"
    ".transform.proto.Rigid3dB\026B\024TrajectoryOu"
    "terClass", 488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory.proto", &protobuf_RegisterTypes);
  Trajectory::default_instance_ = new Trajectory();
  Trajectory_Node::default_instance_ = new Trajectory_Node();
  Trajectory_Submap::default_instance_ = new Trajectory_Submap();
  Trajectory::default_instance_->InitAsDefaultInstance();
  Trajectory_Node::default_instance_->InitAsDefaultInstance();
  Trajectory_Submap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Trajectory_Node::kNodeIndexFieldNumber;
const int Trajectory_Node::kTimestampFieldNumber;
const int Trajectory_Node::kPoseFieldNumber;
#endif  // !_MSC_VER

Trajectory_Node::Trajectory_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trajectory_Node::InitAsDefaultInstance() {
  pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

Trajectory_Node::Trajectory_Node(const Trajectory_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trajectory_Node::SharedCtor() {
  _cached_size_ = 0;
  node_index_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trajectory_Node::~Trajectory_Node() {
  SharedDtor();
}

void Trajectory_Node::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void Trajectory_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_Node_descriptor_;
}

const Trajectory_Node& Trajectory_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  return *default_instance_;
}

Trajectory_Node* Trajectory_Node::default_instance_ = NULL;

Trajectory_Node* Trajectory_Node::New() const {
  return new Trajectory_Node;
}

void Trajectory_Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_index_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_pose()) {
      if (pose_ != NULL) pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trajectory_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d pose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_node_index;
        break;
      }

      // optional int32 node_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));
          set_has_node_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trajectory_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 5;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pose(), output);
  }

  // optional int32 node_index = 7;
  if (has_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->node_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trajectory_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 5;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pose(), target);
  }

  // optional int32 node_index = 7;
  if (has_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->node_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trajectory_Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 node_index = 7;
    if (has_node_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_index());
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .cartographer.transform.proto.Rigid3d pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trajectory_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trajectory_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectory_Node::MergeFrom(const Trajectory_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_index()) {
      set_node_index(from.node_index());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_pose()) {
      mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trajectory_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Node::CopyFrom(const Trajectory_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Node::IsInitialized() const {

  return true;
}

void Trajectory_Node::Swap(Trajectory_Node* other) {
  if (other != this) {
    std::swap(node_index_, other->node_index_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trajectory_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_Node_descriptor_;
  metadata.reflection = Trajectory_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Trajectory_Submap::kSubmapIndexFieldNumber;
const int Trajectory_Submap::kPoseFieldNumber;
#endif  // !_MSC_VER

Trajectory_Submap::Trajectory_Submap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trajectory_Submap::InitAsDefaultInstance() {
  pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

Trajectory_Submap::Trajectory_Submap(const Trajectory_Submap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trajectory_Submap::SharedCtor() {
  _cached_size_ = 0;
  submap_index_ = 0;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trajectory_Submap::~Trajectory_Submap() {
  SharedDtor();
}

void Trajectory_Submap::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void Trajectory_Submap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory_Submap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_Submap_descriptor_;
}

const Trajectory_Submap& Trajectory_Submap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  return *default_instance_;
}

Trajectory_Submap* Trajectory_Submap::default_instance_ = NULL;

Trajectory_Submap* Trajectory_Submap::New() const {
  return new Trajectory_Submap;
}

void Trajectory_Submap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    submap_index_ = 0;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trajectory_Submap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Rigid3d pose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_submap_index;
        break;
      }

      // optional int32 submap_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_submap_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_index_)));
          set_has_submap_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trajectory_Submap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.transform.proto.Rigid3d pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose(), output);
  }

  // optional int32 submap_index = 2;
  if (has_submap_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trajectory_Submap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.transform.proto.Rigid3d pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose(), target);
  }

  // optional int32 submap_index = 2;
  if (has_submap_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trajectory_Submap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 submap_index = 2;
    if (has_submap_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->submap_index());
    }

    // optional .cartographer.transform.proto.Rigid3d pose = 1;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory_Submap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trajectory_Submap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trajectory_Submap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectory_Submap::MergeFrom(const Trajectory_Submap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_submap_index()) {
      set_submap_index(from.submap_index());
    }
    if (from.has_pose()) {
      mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trajectory_Submap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Submap::CopyFrom(const Trajectory_Submap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Submap::IsInitialized() const {

  return true;
}

void Trajectory_Submap::Swap(Trajectory_Submap* other) {
  if (other != this) {
    std::swap(submap_index_, other->submap_index_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trajectory_Submap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_Submap_descriptor_;
  metadata.reflection = Trajectory_Submap_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Trajectory::kTrajectoryIdFieldNumber;
const int Trajectory::kNodeFieldNumber;
const int Trajectory::kSubmapFieldNumber;
#endif  // !_MSC_VER

Trajectory::Trajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trajectory::InitAsDefaultInstance() {
}

Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trajectory::SharedCtor() {
  _cached_size_ = 0;
  trajectory_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trajectory::~Trajectory() {
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_descriptor_;
}

const Trajectory& Trajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  return *default_instance_;
}

Trajectory* Trajectory::default_instance_ = NULL;

Trajectory* Trajectory::New() const {
  return new Trajectory;
}

void Trajectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trajectory_id_ = 0;
  }
  node_.Clear();
  submap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectTag(18)) goto parse_submap;
        break;
      }

      // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_submap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_submap;
        if (input->ExpectTag(24)) goto parse_trajectory_id;
        break;
      }

      // optional int32 trajectory_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trajectory_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
          set_has_trajectory_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  for (int i = 0; i < this->submap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->submap(i), output);
  }

  // optional int32 trajectory_id = 3;
  if (has_trajectory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trajectory_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  for (int i = 0; i < this->submap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->submap(i), target);
  }

  // optional int32 trajectory_id = 3;
  if (has_trajectory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trajectory_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trajectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 trajectory_id = 3;
    if (has_trajectory_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trajectory_id());
    }

  }
  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  total_size += 1 * this->submap_size();
  for (int i = 0; i < this->submap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->submap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  submap_.MergeFrom(from.submap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trajectory_id()) {
      set_trajectory_id(from.trajectory_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {

  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other != this) {
    std::swap(trajectory_id_, other->trajectory_id_);
    node_.Swap(&other->node_);
    submap_.Swap(&other->submap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_descriptor_;
  metadata.reflection = Trajectory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
